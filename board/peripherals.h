/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_edma.h"
#include "fsl_dmamux.h"
#include "fsl_common.h"
#include "fsl_clock.h"
#include "fsl_ftm.h"
#include "fsl_cmp.h"
#include "fsl_gpio.h"
#include "fsl_port.h"
#include "fsl_dspi.h"
#include "fsl_dac.h"
#include "fsl_pit.h"
#include "fsl_adc16.h"
#include "fsl_uart.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitPeripherals functional group */
/* Used DMA device. */
#define DMA_DMA_BASEADDR DMA0
/* Associated DMAMUX device that is used for muxing of requests. */
#define DMA_DMAMUX_BASEADDR DMAMUX
/* Definition of peripheral ID */
#define FTM0_PERIPHERAL FTM0
/* Definition of the clock source frequency */
#define FTM0_CLOCK_SOURCE CLOCK_GetFreq(kCLOCK_BusClk)
/* FTM0 interrupt vector ID (number). */
#define FTM0_IRQN FTM0_IRQn
/* FTM0 interrupt handler identifier. */
#define FTM0_IRQHANDLER FTM0_IRQHandler
/* Definition of peripheral ID */
#define FTM1_PERIPHERAL FTM1
/* Definition of the clock source frequency */
#define FTM1_CLOCK_SOURCE CLOCK_GetFreq(kCLOCK_BusClk)
/* FTM1 interrupt vector ID (number). */
#define FTM1_IRQN FTM1_IRQn
/* FTM1 interrupt handler identifier. */
#define FTM1_IRQHANDLER FTM1_IRQHandler
/* Definition of peripheral ID */
#define CMP0_PERIPHERAL CMP0
/* Definition of positive input source used in CMP_SetInputChannels() function */
#define CMP0_POSITIVE_INPUT_NUMBER 1U
/* Definition of negative input source used in CMP_SetInputChannels() function */
#define CMP0_NEGATIVE_INPUT_NUMBER 2U
/* Alias for GPIOB peripheral */
#define GPIOB_GPIO GPIOB
/* BOARD_InitPeripherals defines for SPI1 */
/* Definition of peripheral ID */
#define SPI1_PERIPHERAL SPI1
/* Definition of the clock source */
#define SPI1_CLOCK_SOURCE DSPI1_CLK_SRC
/* Definition of the clock source frequency */
#define SPI1_CLK_FREQ CLOCK_GetFreq(SPI1_CLOCK_SOURCE)
/* BOARD_InitPeripherals defines for SPI0 */
/* Definition of peripheral ID */
#define SPI0_PERIPHERAL SPI0
/* Definition of the clock source */
#define SPI0_CLOCK_SOURCE DSPI0_CLK_SRC
/* Definition of the clock source frequency */
#define SPI0_CLK_FREQ CLOCK_GetFreq(SPI0_CLOCK_SOURCE)
/* Alias for GPIOA peripheral */
#define GPIOA_GPIO GPIOA
/* Alias for GPIOC peripheral */
#define GPIOC_GPIO GPIOC
/* Alias for GPIOD peripheral */
#define GPIOD_GPIO GPIOD
/* Alias for GPIOE peripheral */
#define GPIOE_GPIO GPIOE
/* Alias for DAC0 peripheral */
#define DAC0_PERIPHERAL DAC0
/* BOARD_InitPeripherals defines for PIT */
/* Definition of peripheral ID. */
#define PIT_PERIPHERAL PIT
/* Definition of clock source. */
#define PIT_CLOCK_SOURCE kCLOCK_BusClk
/* Definition of clock source frequency. */
#define PIT_CLK_FREQ CLOCK_GetFreq(PIT_CLOCK_SOURCE)
/* Definition of ticks count for channel 0 - deprecated. */
#define PIT_0_TICKS USEC_TO_COUNT(1000000U, PIT_CLK_FREQ) - 1U
/* PIT interrupt vector ID (number) - deprecated. */
#define PIT_0_IRQN PIT0_IRQn
/* PIT interrupt handler identifier - deprecated. */
#define PIT_0_IRQHANDLER PIT0_IRQHandler
/* Definition of channel number for channel 0. */
#define PIT_CHANNEL_0 kPIT_Chnl_0
/* Definition of ticks count for channel 0. */
#define PIT_CHANNEL_0_TICKS USEC_TO_COUNT(1000000U, PIT_CLK_FREQ) - 1U
/* PIT interrupt vector ID (number). */
#define PIT_CHANNEL_0_IRQN PIT0_IRQn
/* PIT interrupt handler identifier. */
#define PIT_CHANNEL_0_IRQHANDLER PIT0_IRQHandler
/* Alias for ADC0 peripheral */
#define ADC0_PERIPHERAL ADC0
/* ADC0 interrupt vector ID (number). */
#define ADC0_IRQN ADC0_IRQn
/* ADC0 interrupt handler identifier. */
#define ADC0_IRQHANDLER ADC0_IRQHandler
/* Alias for DAC1 peripheral */
#define DAC1_PERIPHERAL DAC1
/* Definition of peripheral ID */
#define UART0_PERIPHERAL UART0
/* Definition of the clock source frequency */
#define UART0_CLOCK_SOURCE 120000000UL
/* Alias for ADC1 peripheral */
#define ADC1_PERIPHERAL ADC1
/* ADC1 interrupt vector ID (number). */
#define ADC1_IRQN ADC1_IRQn
/* ADC1 interrupt handler identifier. */
#define ADC1_IRQHANDLER ADC1_IRQHandler

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const edma_config_t DMA_config;
extern const ftm_config_t FTM0_config;
extern const ftm_config_t FTM1_config;
extern const cmp_config_t CMP0_config;
extern const dspi_master_config_t SPI1_config;
extern const dspi_master_config_t SPI0_config;
extern const dac_config_t DAC0_config;
extern const pit_config_t PIT_config;
extern const adc16_config_t ADC0_config;
extern const adc16_channel_mux_mode_t ADC0_muxMode;
extern const dac_config_t DAC1_config;
extern const uart_config_t UART0_config;
extern const adc16_config_t ADC1_config;
extern const adc16_channel_mux_mode_t ADC1_muxMode;

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/

void BOARD_InitPeripherals(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
